generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  Comment       Comment[]
  Post          Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  title      String
  slug       String    @unique
  content    String
  image      String?
  nbView     Int       @default(0)
  nbComments Int       @default(0)
  userId     String
  catSlug    String
  release    DateTime? // Date de sortie de l'album
  artist     String?   // Artiste de l'album
  team       Json?     // Ã‰quipe/musiciens (array)
  links      Json?     // Liens externes (array)
  trackList  Json?     // Liste des pistes (array)
  comments   Comment[]
  Category   Category  @relation(fields: [catSlug], references: [slug])
  User       User      @relation(fields: [userId], references: [id])
}

model Category {
  id    String  @id @default(cuid())
  slug  String  @unique
  title String
  image String?
  Post  Post[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  userId    String
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
  User      User     @relation(fields: [userId], references: [id])
}

model Email {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String
}
